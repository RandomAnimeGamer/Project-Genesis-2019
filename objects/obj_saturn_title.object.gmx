<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_saturn_logo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Variables

YOrigin     = sprite_get_height(sprite_index) / 2; // Center of the Logo sprite.

//x        = room_width / 2;         // Set the initial position of the logo to be
y        = room_height + YOrigin;  // at the bottom center of the screen.
xstart   = x;
ystart   = y;

TTimer   = 0; // Tween timer.
BGAlpha  = 0;

alarm[0] = 30; // Wait 30 frames before showing the logo.

state    = 0;

animState = 0;
showText = false;
textTimer = 0;

PlaySound(asset_get_index("bgm_title_screen"), global.BGMVolume, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logo Timing
switch(state)
{
    case 0: // Allow the Flicky icon to move to the center of the screen.
        state = 1;
        break;
    case 2: // Start the Flicky Engine text entrance with a bang.
        state = 3;
        break;
    case 4:
        state = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cont = keyboard_check_pressed(global.Key_ENTER);

/// Logo States
switch(state)
{
    case 1: // Move the Flick icon to the center of the screen.
    {
        y = scr_tween_quad_out(TTimer, ystart, (room_height / 2) - ystart - 32, 45);
        if (TTimer &lt; 45)
            ++TTimer;
        else
        {
            TTimer  = 0;
            xstart  = x;
            state   = 2;
        }
        break;
    }
    case 2:
    {   // Small pause between the chirp and the text entrance.
        if (alarm[0] &lt;= 0)
            alarm[0] = 24;
        break;
    }
    case 3:
    {
        if (TTimer &lt; 16)
            ++TTimer;
        else
        {   // Wrapping things up.
            TTimer   = 0;
            alarm[0] = 72;
            state    = 4;
        }
    }
}

if(state == 5){
   // Increase BG Alpha.
   if(BGAlpha != 1.5){
      BGAlpha += .010;
   }else if(BGAlpha &gt;= 1.4) {
        if (TTimer &lt; 16)
            ++TTimer;
        else
        {
            if(cont) {
                TTimer = 0;
                state = 6;
                PlaySound(asset_get_index("snd_character_jump"), global.SFXVolume, 1, 0);
            }
            // wait for input here
        }
   }
}

if(state == 6) {
   if(instance_exists(obj_fade_next) == false){
      instance_create(0, 0, obj_fade_next);
   }
   if(TTimer &lt; 16) ++TTimer;
   else {
        room_goto_next();
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render the Logo parts.
  
// BG:
   draw_set_alpha(BGAlpha)
   draw_sprite(spr_flicky_background, 0, 0, 0-224);
   draw_set_alpha(1)

// Draw Animated Sonic
draw_sprite(spr_saturn_anim, animState, room_width / 4 - sprite_width / 2, room_height / 2 - sprite_height - 32);
animState++;
if(animState &gt; 283) animState = 172;


textTimer++;
if(textTimer &gt;= 60) {
    showText = !showText;
    textTimer = 0;
}

if(state == 5) {
    draw_set_font(genesis);
    if(showText) draw_text_colour(x + 60, y + 110, "Press Start", $00A5FF, $00A5FF, $66C9FF, $66C9FF, 1);
}

// Draw the Icon
   draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
